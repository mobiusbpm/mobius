<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mobius.idm.engine.impl.persistence.entity.UserEntityImpl">

  <!-- USER INSERT -->

  <insert id="insertUser" parameterType="mobius.idm.engine.impl.persistence.entity.UserEntityImpl">
    insert into ${prefix}MBS_USER_ACCOUNT (USER_LOGIN_NAME, USER_PASSWORD, USER_STATUS_CODE_ID,USER_AUTH_TYPE_CODE_ID,
    USER_CREATED_BY, USER_CREATED_TIME, USER_UPDATED_BY, USER_UPDATED_TIME)
    values (
      #{userLoginName ,jdbcType=VARCHAR},
      #{userPassword ,jdbcType=VARCHAR},
      #{userStatusCodeId ,jdbcType=VARCHAR},
      #{userAuthTypeCodeId ,jdbcType=VARCHAR},
      #{userCreatedBy ,jdbcType=INTEGER},
      #{userCreatedTime, jdbcType=TIMESTAMP},
      #{userUpdatedBy ,jdbcType=INTEGER},
      #{userUpdatedTime, jdbcType=TIMESTAMP}
    )
  </insert>

  <insert id="bulkInsertUser" parameterType="java.util.List">
    INSERT INTO ${prefix}MBS_USER_ACCOUNT (USER_LOGIN_NAME, USER_PASSWORD, USER_STATUS_CODE_ID,USER_AUTH_TYPE_CODE_ID,
    USER_CREATED_BY, USER_CREATED_TIME, USER_UPDATED_BY, USER_UPDATED_TIME) VALUES
      <foreach collection="list" item="user" index="index" separator=",">
        (
        #{userLoginName ,jdbcType=VARCHAR},
        #{userPassword ,jdbcType=VARCHAR},
        #{userStatusCodeId ,jdbcType=VARCHAR},
        #{userAuthTypeCodeId ,jdbcType=VARCHAR},
        #{userCreatedBy ,jdbcType=INTEGER},
        #{userCreatedTime, jdbcType=TIMESTAMP},
        #{userUpdatedBy ,jdbcType=INTEGER},
        #{userUpdatedTime, jdbcType=TIMESTAMP}
        )
      </foreach>
  </insert>

  <insert id="bulkInsertUser" databaseId="oracle" parameterType="java.util.List">
    INSERT ALL
      <foreach collection="list" item="user" index="index">
        INTO ${prefix}MBS_USER_ACCOUNT (USER_ID, USER_LOGIN_NAME, USER_PASSWORD, USER_STATUS_CODE_ID,USER_AUTH_TYPE_CODE_ID,
        USER_CREATED_BY, USER_CREATED_TIME, USER_UPDATED_BY, USER_UPDATED_TIME) VALUES
        (
        #{userId ,jdbcType=INTEGER},
        #{userLoginName ,jdbcType=VARCHAR},
        #{userPassword ,jdbcType=VARCHAR},
        #{userStatusCodeId ,jdbcType=VARCHAR},
        #{userAuthTypeCodeId ,jdbcType=VARCHAR},
        #{userCreatedBy ,jdbcType=INTEGER},
        #{userCreatedTime, jdbcType=TIMESTAMP},
        #{userUpdatedBy ,jdbcType=INTEGER},
        #{userUpdatedTime, jdbcType=TIMESTAMP}
        )
      </foreach>
    SELECT * FROM dual
  </insert>

  <!-- USER UPDATE -->

  <update id="updateUser" parameterType="mobius.idm.engine.impl.persistence.entity.UserEntityImpl">
    update ${prefix}MBS_USER_ACCOUNT set
      <if test="originalPersistentState.userLoginName != userLoginName">
        USER_LOGIN_NAME = #{userLoginName, jdbcType=VARCHAR},
      </if>
      <if test="originalPersistentState.userPassword != userPassword">
        USER_PASSWORD = #{userPassword ,jdbcType=VARCHAR}
      </if>
    where USER_ID = #{userId}
  </update>

  <!-- USER DELETE -->

  <delete id="deleteUser" parameterType="mobius.idm.engine.impl.persistence.entity.UserEntityImpl">
    delete from ${prefix}MBS_USER_ACCOUNT where USER_ID = #{userId}
  </delete>

  <!-- USER RESULTMAP -->
  <resultMap id="userResultMap" type="mobius.idm.engine.impl.persistence.entity.UserEntityImpl">
    <id property="id" column="USER_ID" jdbcType="INTEGER" />
    <result property="userLoginName" column="USER_LOGIN_NAME" jdbcType="VARCHAR" />
    <result property="userPassword" column="USER_PASSWORD" jdbcType="VARCHAR" />
    <result property="userStatusCodeId" column="USER_STATUS_CODE_ID" jdbcType="INTEGER" />
    <result property="userAuthTypeCodeId" column="USER_AUTH_TYPE_CODE_ID" jdbcType="INTEGER" />
    <result property="userCreatedBy" column="USER_CREATED_BY" jdbcType="INTEGER" />
    <result property="userCreatedTime" column="USER_CREATED_TIME" jdbcType="TIMESTAMP" />
    <result property="userUpdatedBy" column="USER_UPDATED_BY"  jdbcType="INTEGER" />
    <result property="userUpdatedTime" column="USER_UPDATED_TIME" jdbcType="TIMESTAMP" />
  </resultMap>
  <!-- USER SELECT -->

  <select id="selectUser" parameterType="string" resultMap="userResultMap">
    select * from ${prefix}MBS_USER_ACCOUNT where USER_ID = #{id, jdbcType=INTEGER}
  </select>

  <select id="selectUserByQueryCriteria" parameterType="mobius.idm.engine.impl.UserQueryImpl" resultMap="userResultMap">
  	<if test="firstResult != null and firstResult &gt;= 0">${limitBefore}</if>
    select RES.* <if test="firstResult != null and firstResult &gt;= 0">${limitBetween}</if>
    <include refid="selectUserByQueryCriteriaSql" />
    ${orderBy}
    <if test="firstResult != null and firstResult &gt;= 0">${limitAfter}</if>
  </select>

  <select id="selectUserCountByQueryCriteria" parameterType="mobius.idm.engine.impl.UserQueryImpl" resultType="long">
    select count(RES.USER_ID)
    <include refid="selectUserByQueryCriteriaSql" />
  </select>

  <sql id="selectUserByQueryCriteriaSql">
    from ${prefix}MBS_USER_ACCOUNT RES
    <where>
      <if test="userId != null">
        RES.USER_ID = #{userId}
      </if>
      <if test="userIds != null &amp;&amp; userIds.size() &gt; 0">
        and RES.USER_ID IN
        <foreach item="userId" index="index" collection="userIds"
                 open="(" separator="," close=")">
          #{userId}
        </foreach>
      </if>
 <!--     <if test="idIgnoreCase != null">
        and lower(RES.USER_ID) = #{idIgnoreCase}
      </if>-->
      <if test="userLoginName != null">
        and RES.USER_LOGIN_NAME = #{userLoginName}
      </if>
      <if test="loginNameLike != null">
        and RES.USER_LOGIN_NAME like #{loginNameLike}${wildcardEscapeClause}
      </if>
    </where>
  </sql>

  <select id="selectUserByNativeQuery" parameterType="java.util.Map" resultMap="userResultMap">
    <include refid="mobius.idm.engine.db.common.selectByNativeQuery"/>
  </select>

  <select id="selectUserCountByNativeQuery" parameterType="java.util.Map" resultType="long">
    ${sql}
  </select>

  <select id="selectUsersWithPrivilegeId" parameterType="string" resultMap="userResultMap">
    select RES.* from ${prefix}MBS_USER_ACCOUNT RES
    inner join ${prefix}ACT_ID_PRIV_MAPPING MAPPING on MAPPING.USER_ID = RES.USER_ID
    inner join ${prefix}ACT_ID_PRIV PRIV on PRIV.USER_ID = MAPPING.PRIV_ID_
    where PRIV.USER_ID = #{parameter}
    order by RES.USER_UPDATED_TIME
  </select>

</mapper>
